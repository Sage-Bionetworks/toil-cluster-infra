AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Provision EC2 instances for toil
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: ""
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t3.nano
  VpcSubnet:
    Description: Name of an existing VPC subnet to run the instance in.
    Type: String
    Default: PrivateSubnet
    ConstraintDescription: >-
      Allowed values (PrivateSubnet, PrivateSubnet1, PrivateSubnet2, PublicSubnet, PublicSubnet1, PublicSubnet2)
    AllowedValues:
      - PrivateSubnet
      - PrivateSubnet1
      - PrivateSubnet2
      - PublicSubnet
      - PublicSubnet1
      - PublicSubnet2
  VpcName:
    Description: 'Name of an existing VPC to run the instance in'
    Type: String
  Department:
    Description: 'The department for this resource'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
  Project:
    Description: 'The name of the project that this resource is used for'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
  SubProject:
    Description: 'The name of the sub-project that this resource is used for'
    Type: String
    AllowedPattern: '^\S*$'
    ConstraintDescription: 'Must be string with no spaces'
  OwnerEmail:
    Description: 'Email address of the owner of this resource'
    Type: String
    AllowedPattern: '^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
    ConstraintDescription: 'Must be an acceptable email address syntax(i.e. joe.smith@sagebase.org)'
  EncryptVolume:
    Type: String
    Description: true to encrypt root volume, false (default) for no encryption
    AllowedValues:
      - true
      - false
    Default: true
    ConstraintDescription: 'Must be true or false'
  ParkMyCloudManaged:
    Description: Allow ParkMyCloud service to start/stop resources
    Type: String
    Default: 'yes'
  AMIId:
    Description: ID of the AMI to deploy
    Type: 'AWS::EC2::Image::Id'
  RoleStackName:
    Description: Stack name of the instance profile role.
    Type: String
  VolumeSize:
    Description: The EC2 volume size (in GB)
    Type: Number
    Default: 8
    MinValue: 8
    MaxValue: 1000
  RsaKey:
    Description: RSA key for instance
    Type: String
  PublicRsaKey:
    Description: Public RSA key for instance
    Type: String
  ToilAppliance:
    Description: Docker image to use for the toil instances.
    Type: String
    Default: 'quay.io/tessthyer/toil-appliance:f3cb3b0'
  ClusterName:
    Description: Name of the cluster, will be applied to all instances associated with it.
    Type: String
  ClusterLeaderNodeType:
    Description: EC2 instance type for the leader node in the toil cluster.
    Type: String
    Default: 'm5.large'
  ClusterLeaderStorage:
    Description: Amount of disk in Gigabytes to reserve for the cluster leader.
    Type: Number
    Default: 100
    MinValue: 50
  ClusterAvailabilityZone:
    Description: Name of the availability zone for the toil cluster.
    Type: AWS::EC2::AvailabilityZone::Name
    Default: 'us-east-1a'
Conditions:
  PublicEc2Resources: !Or [!Equals [ !Ref VpcSubnet, PublicSubnet ], !Equals [ !Ref VpcSubnet, PublicSubnet1 ], !Equals [ !Ref VpcSubnet, PublicSubnet2 ] ]
  HasKeyName: !Not [!Equals ["", !Ref KeyName]]
Resources:
  Ec2Instance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          SetupCfn:
            - configure_cfn
          SetupVolume:
            - TagRootVolume
          SetupSsh:
            - WriteSshFiles
          SetupCluster:
            - ClusterService
        configure_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.Ec2Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Ec2Instance --configsets SetupCfn,SetupVolume,SetupSsh,SetupCluster --region ${AWS::Region}
                runas=root
              mode: "000400"
              owner: root
              group: root
            /lib/systemd/system/cfn-hup.service:
              content: |
                [Unit]
                Description=cfn-hup daemon

                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always

                [Install]
                WantedBy=multi-user.target
              mode: "000400"
              owner: root
              group: root
          commands:
            01_enable_cfn-hup:
              command: "/bin/systemctl enable cfn-hup.service"
            02_start_cfn-hup:
              command: "/bin/systemctl start cfn-hup.service"
        TagRootVolume:
          packages:
            apt:
              awscli: []
          commands:
            01_tag_root_disk:
              command: !Join
                - ''
                - - "EC2_INSTANCE_ID=$(/usr/bin/curl -s http://169.254.169.254/latest/meta-data/instance-id) "
                  - "ROOT_DISK_ID=$(/usr/bin/aws ec2 describe-volumes --region $AWS_REGION "
                  - "--filters Name=attachment.instance-id,Values=$EC2_INSTANCE_ID "
                  - "--query Volumes[].VolumeId --out text); "
                  - "/usr/bin/aws ec2 create-tags --region $AWS_REGION --resources $ROOT_DISK_ID "
                  - "--tags Key=Name,Value=$EC2_INSTANCE_ID-root Key=cloudformation:stack-name,Value=$STACK_NAME "
                  - "Key=Department,Value=$DEPARTMENT Key=Project,Value=$PROJECT Key=OwnerEmail,Value=$OWNER_EMAIL"
              env:
                AWS_REGION: !Ref AWS::Region
                STACK_NAME: !Ref AWS::StackName
                DEPARTMENT: !Ref Department
                PROJECT: !Ref Project
                OWNER_EMAIL: !Ref OwnerEmail
        WriteSshFiles:
          files:
            /root/.ssh/id_rsa:
              content: !Ref RsaKey
              mode: "000400"
              owner: "root"
              group: "root"
            /root/.ssh/id_rsa.pub:
              content: !Ref PublicRsaKey
              mode: "000644"
              owner: "root"
              group: "root"
        ClusterService:
          files:
            /etc/init.d/toil-cluster-service:
              content: !Sub
                - |
                  #! /bin/bash

                  ### BEGIN INIT INFO
                  # Provides:          a toil cluster
                  # Required-Start:    $local_fs $network
                  # Required-Stop:     $local_fs
                  # Default-Start:     2 3 4 5
                  # Default-Stop:      0 1 6
                  # Short-Description: toil-cluster-management
                  # Description:       Run a toil cluster management service
                  ### END INIT INFO

                  prog='toil cluster service'

                  start() {
                    export TOIL_APPLIANCE_SELF=${ToilAppliance} && \
                    /bin/echo "Launching cluster with appliance $TOIL_APPLIANCE_SELF" && \
                    /usr/local/bin/toil launch-cluster ${ClusterName} \
                    --leaderNodeType ${LeaderNodeType} \
                    --leaderStorage ${ClusterLeaderStorage} \
                    --zone ${ClusterAvailabilityZone} \
                    --keyPairName ${KeyName} \
                    --vpcSubnet ${VpcSubnetId} \
                    --awsEc2ProfileArn ${ToilInstanceProfileArn} \
                    --tag Department=${Department} \
                    --tag Name=${ClusterName} \
                    --tag OwnerEmail=${OwnerEmail} \
                    --tag Project=${Project} \
                    --tag SubProject=${SubProject} \
                    --tag parkmycloud=yes \
                    --logDebug && \
                    /usr/bin/python /opt/toil/bin/add-security-group.py
                  }

                  stop() {
                    /usr/local/bin/toil destroy-cluster --zone ${ClusterAvailabilityZone} ${ClusterName}
                  }

                  status() {
                    echo 'cluster status not implemented'
                  }

                  case "$1" in
                    start)
                    start
                    ;;
                    stop)
                    stop
                    ;;
                    status|fullstatus)
                    status
                    ;;
                    restart|reload)
                    stop
                    start
                    ;;
                    *)
                    echo $"Usage: $prog {start|stop|restart|reload|status|fullstatus}"
                    exit 1
                  esac

                  exit 0

                - VpcSubnetId: !ImportValue {'Fn::Sub': '${AWS::Region}-${VpcName}-${VpcSubnet}'}
                  ToilInstanceProfileArn: !ImportValue {'Fn::Sub': '${AWS::Region}-${RoleStackName}-ToilClusterInstanceProfileArn'}
                  LeaderNodeType: !Ref ClusterLeaderNodeType
              mode: "00755"
              owner: "root"
              group: "root"
            /opt/toil/bin/add-security-group.py:
              content: !Sub
                - |
                  #! /usr/bin/env python

                  import boto3

                  region = "${AWS::Region}"
                  client = boto3.client('ec2', region_name=region)

                  print('Ensure vpn security group is associated with leader node.')

                  print('\nSending describe instances request')
                  describe_instances_response = client.describe_instances(
                    Filters=[
                      {
                          'Name': 'tag:Name',
                          'Values': ["${ClusterName}"]
                      },
                      {
                          'Name': 'tag:ToilNodeType',
                          'Values': ['leader']
                      }
                    ])

                  print('Describe instances response:')
                  print(describe_instances_response)

                  instance_ids = [
                    instance.get('InstanceId')
                    for reservation in describe_instances_response.get('Reservations')
                    for instance in reservation.get('Instances') if instance.get('State').get('Name') != 'terminated'
                  ]

                  print('\nList of instance ids:')
                  print(' '.join(instance_ids))
                  assert len(instance_ids) == 1
                  instance_id = instance_ids[0]
                  print('\n\ninstance_id: %s' % instance_id)

                  print('\n\Sending instance groups request')
                  groups_response = client.describe_instance_attribute(
                    InstanceId=instance_id,
                    Attribute='groupSet'
                    )
                  print('Groups response:')
                  print(groups_response)

                  group_ids = [group['GroupId'] for group in groups_response['Groups']]
                  print('\ngroup_ids: %s' % ' '.join(group_ids))

                  new_security_group = "${VPNSecurityGroup}"

                  if(new_security_group in group_ids):
                    print('Desired security group already associated with leader.')
                  else:
                    group_ids.append(new_security_group)

                    print('Sending modify groups request')
                    modify_groups_response = client.modify_instance_attribute(
                      InstanceId=instance_id,
                      Groups=group_ids
                      )

                    print('Modify groups response:')
                    print(modify_groups_response)
                - VPNSecurityGroup: !ImportValue {'Fn::Sub': '${AWS::Region}-${VpcName}-VpnSecurityGroup'}
              mode: "00644"
              owner: "root"
              group: "root"
          commands:
            # toil-cluster-service is a SysV service, and these require setting run-levels
            # see http://manpages.ubuntu.com/manpages/bionic/man8/update-rc.d.8.html
            01_add_toil-cluster-service_run-levels:
              command: "sudo /usr/sbin/update-rc.d toil-cluster-service defaults"
          services:
            sysvinit:
              toil-cluster-service:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/init.d/toil-cluster-service"
                  - "/opt/toil/bin/add-security-group.py"
    Properties:
      ImageId: !Ref AMIId
      InstanceType: !Ref InstanceType
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      BlockDeviceMappings:
        -
          DeviceName: "/dev/sda1"
          Ebs:
            DeleteOnTermination: true
            VolumeSize: !Ref VolumeSize
            Encrypted: !Ref EncryptVolume
      NetworkInterfaces:
        - DeleteOnTermination: true
          DeviceIndex: "0"
          GroupSet:
            - !ImportValue
              'Fn::Sub': '${AWS::Region}-${VpcName}-VpnSecurityGroup'
          SubnetId: !ImportValue
            'Fn::Sub': '${AWS::Region}-${VpcName}-${VpcSubnet}'
      IamInstanceProfile: !ImportValue
        'Fn::Sub': '${AWS::Region}-${RoleStackName}-ToilClusterInstanceProfile'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          export DEBIAN_FRONTEND=noninteractive
          /usr/bin/apt-get -y update
          /usr/bin/apt-get -y upgrade
          /usr/bin/apt-get install -y python-pip
          /usr/bin/apt-get install -y python-setuptools
          /bin/mkdir -p /opt/aws/bin /opt/toil/bin
          /usr/bin/python /usr/lib/python2.7/dist-packages/easy_install.py --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          /usr/bin/pip install toil[cwl,aws]
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Ec2Instance --configsets SetupCfn,SetupVolume,SetupSsh,SetupCluster --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Ec2Instance --region ${AWS::Region}
      Tags:
        - Key: "parkmycloud"
          Value: !Ref ParkMyCloudManaged
        - Key: "Name"
          Value: !Ref 'AWS::StackName'
        - Key: "Department"
          Value: !Ref Department
        - Key: "Project"
          Value: !Ref Project
        - Key: "OwnerEmail"
          Value: !Ref OwnerEmail
    CreationPolicy:
      ResourceSignal:
        Timeout: PT12M
Outputs:
  Ec2InstanceId:
    Value: !Ref Ec2Instance
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-Ec2InstanceId'
  Ec2InstancePrivateIp:
    Value: !GetAtt Ec2Instance.PrivateIp
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-Ec2InstancePrivateIp'
  Ec2InstancePublicIp:
    Condition: PublicEc2Resources
    Value: !GetAtt Ec2Instance.PublicIp
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-Ec2InstancePublicIp'
  OwnerEmail:
    Value: !Ref OwnerEmail
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-OwnerEmail'
